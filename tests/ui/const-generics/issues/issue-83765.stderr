error[E0391]: cycle detected when resolving instance `<LazyUpdim<'_, T, <T as TensorDimension>::DIM, DIM> as TensorDimension>::DIM`
  --> $DIR/issue-83765.rs:5:5
   |
LL |     const DIM: usize;
   |     ^^^^^^^^^^^^^^^^
   |
note: ...which requires computing candidate for `<LazyUpdim<'_, T, <T as TensorDimension>::DIM, DIM> as TensorDimension>`...
  --> $DIR/issue-83765.rs:4:1
   |
LL | trait TensorDimension {
   | ^^^^^^^^^^^^^^^^^^^^^
   = note: ...which again requires resolving instance `<LazyUpdim<'_, T, <T as TensorDimension>::DIM, DIM> as TensorDimension>::DIM`, completing the cycle
note: cycle used when computing candidate for `<LazyUpdim<'_, T, { T::DIM }, DIM> as TensorDimension>`
  --> $DIR/issue-83765.rs:4:1
   |
LL | trait TensorDimension {
   | ^^^^^^^^^^^^^^^^^^^^^
   = note: see https://rustc-dev-guide.rust-lang.org/overview.html#queries and https://rustc-dev-guide.rust-lang.org/query.html for more information

error[E0391]: cycle detected when resolving instance `<LazyUpdim<'_, T, <T as TensorDimension>::DIM, DIM> as TensorDimension>::DIM`
  --> $DIR/issue-83765.rs:5:5
   |
LL |     const DIM: usize;
   |     ^^^^^^^^^^^^^^^^
   |
note: ...which requires computing candidate for `<LazyUpdim<'_, T, <T as TensorDimension>::DIM, DIM> as TensorDimension>`...
  --> $DIR/issue-83765.rs:4:1
   |
LL | trait TensorDimension {
   | ^^^^^^^^^^^^^^^^^^^^^
   = note: ...which again requires resolving instance `<LazyUpdim<'_, T, <T as TensorDimension>::DIM, DIM> as TensorDimension>::DIM`, completing the cycle
note: cycle used when checking item types in top-level module
  --> $DIR/issue-83765.rs:1:1
   |
LL | / #![feature(generic_const_exprs)]
LL | | #![allow(incomplete_features)]
LL | |
LL | | trait TensorDimension {
...  |
LL | |     println!("The size of v is {:?}", bbv.bget([0, 2]).expect("Out of bounds."));
LL | | }
   | |_^
   = note: see https://rustc-dev-guide.rust-lang.org/overview.html#queries and https://rustc-dev-guide.rust-lang.org/query.html for more information

error[E0308]: method not compatible with trait
  --> $DIR/issue-83765.rs:86:5
   |
LL |     fn size(&self) -> [usize; DIM] {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Self::DIM`, found `DIM`
   |
   = note: expected constant `Self::DIM`
              found constant `DIM`

error[E0308]: method not compatible with trait
  --> $DIR/issue-83765.rs:98:5
   |
LL |     fn bget(&self, index: [usize; DIM]) -> Option<Self::Element> {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Self::DIM`, found `DIM`
   |
   = note: expected constant `Self::DIM`
              found constant `DIM`

error: unconstrained generic constant
  --> $DIR/issue-83765.rs:60:18
   |
LL |         if !self.inbounds(index) {
   |                  ^^^^^^^^
   |
   = help: try adding a `where` bound using this expression: `where [(); Self::DIM]:`
note: required by a bound in `TensorSize::inbounds`
  --> $DIR/issue-83765.rs:18:39
   |
LL |     fn inbounds(&self, index: [usize; Self::DIM]) -> bool {
   |                                       ^^^^^^^^^ required by this bound in `TensorSize::inbounds`

error[E0308]: mismatched types
  --> $DIR/issue-83765.rs:60:27
   |
LL |         if !self.inbounds(index) {
   |                           ^^^^^ expected `Self::DIM`, found `DIM`
   |
   = note: expected constant `Self::DIM`
              found constant `DIM`

error: unconstrained generic constant
  --> $DIR/issue-83765.rs:65:25
   |
LL |         let size = self.size();
   |                         ^^^^
   |
   = help: try adding a `where` bound using this expression: `where [(); Self::DIM]:`
note: required by a bound in `TensorSize::size`
  --> $DIR/issue-83765.rs:17:31
   |
LL |     fn size(&self) -> [usize; Self::DIM];
   |                               ^^^^^^^^^ required by this bound in `TensorSize::size`

error[E0277]: the trait bound `[usize; T::DIM]: Default` is not satisfied
  --> $DIR/issue-83765.rs:67:41
   |
LL |         let newindex: [usize; T::DIM] = Default::default();
   |                                         ^^^^^^^^^^^^^^^^ the trait `Default` is not implemented for `[usize; T::DIM]`
   |
help: consider introducing a `where` clause, but there might be an alternative better way to express this requirement
   |
LL | impl<'a, T: Broadcastable, const DIM: usize> Broadcastable for LazyUpdim<'a, T, { T::DIM }, DIM> where [usize; T::DIM]: Default {
   |                                                                                                  ++++++++++++++++++++++++++++++

error: unconstrained generic constant
  --> $DIR/issue-83765.rs:88:24
   |
LL |         self.reference.size()
   |                        ^^^^
   |
   = help: try adding a `where` bound using this expression: `where [(); Self::DIM]:`
note: required by a bound in `TensorSize::size`
  --> $DIR/issue-83765.rs:17:31
   |
LL |     fn size(&self) -> [usize; Self::DIM];
   |                               ^^^^^^^^^ required by this bound in `TensorSize::size`

error[E0308]: mismatched types
  --> $DIR/issue-83765.rs:88:9
   |
LL |         self.reference.size()
   |         ^^^^^^^^^^^^^^^^^^^^^ expected `DIM`, found `Self::DIM`
   |
   = note: expected constant `DIM`
              found constant `Self::DIM`

error: unconstrained generic constant
  --> $DIR/issue-83765.rs:100:24
   |
LL |         self.reference.bget(index).map(&self.closure)
   |                        ^^^^
   |
   = help: try adding a `where` bound using this expression: `where [(); Self::DIM]:`
note: required by a bound in `Broadcastable::bget`
  --> $DIR/issue-83765.rs:25:35
   |
LL |     fn bget(&self, index: [usize; Self::DIM]) -> Option<Self::Element>;
   |                                   ^^^^^^^^^ required by this bound in `Broadcastable::bget`

error[E0308]: mismatched types
  --> $DIR/issue-83765.rs:100:29
   |
LL |         self.reference.bget(index).map(&self.closure)
   |                             ^^^^^ expected `Self::DIM`, found `DIM`
   |
   = note: expected constant `Self::DIM`
              found constant `DIM`

error: aborting due to 12 previous errors

Some errors have detailed explanations: E0277, E0308, E0391.
For more information about an error, try `rustc --explain E0277`.
